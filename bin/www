#!/usr/bin/env node
require('dotenv').config({ path: './.env' });
/** This checks for 'dev' in argv. ex: "npm run dev"
 *  If it finds it, configure dev environment
 */
if (process.argv.slice(2).findIndex((e) => {return e === 'dev';}) !== -1) {
	process.env.DEV = true;
	process.env.MONGODB_CONNSTRING = 'mongodb://localhost';
	process.env.DBNAME = 'notesapp-dev';
	process.env.SESSION_SECRET = 'keyboard-cat';
}

/**
 * Module dependencies.
 */

var app = require('../app');

var http = require('http');
const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


async function createServer() {
	try {
		//make sure database is working before starting
		server.listen(port);
		server.on('error', onError);
	}
	catch (err) {
		throw new Error('Could not start server!');
	}
}



if (process.env.HTTPS && !process.env.DEV){
	var express = require('express');
	let httpRedirector = express();
	httpRedirector.all('/',(req,res)=> {return res.redirect(300, 'https://notesapp.cloud');});
	server = http.createServer(httpRedirector);
	server.listen(normalizePort(process.env.PORT || '3000'), () => {return console.log('httpRedirector listening');});
	var https = require('https');
	https.createServer(
		{
			key: fs.readFileSync(process.env.KEY),
			cert: fs.readFileSync(process.env.CERT)
		},
		app
	).listen(normalizePort(process.env.PORT || '4000'),()=>{console.log('HTTPS up');});

}else{
	createServer();
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		throw error;
	}
}


process.on('SIGINT', () => {
	server.close(() => {
		console.log('Process terminated');
	});
});