#!/usr/bin/env node

if (process.argv.slice(2).findIndex((e)=> e =="dev")!= -1){

  process.env.DEV =true;
  process.env.MONGODB_CONNSTRING = 'mongodb://localhost'
}


/**
 * Module dependencies.
 */

var app = require('../app');
const mongo = require('../utils/db.js');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);




async function createServer(){
  try {
    //make sure database is working before starting
    let did_connect_to_BD = await tryConnectDB()
   
    if (did_connect_to_BD == true) {
      /**
       * Listen on provided port, on all network interfaces.
       */
      server.listen(port);
      server.on('error', onError);
      server.on('listening', onListening);
    } else {
      throw new Error("Could not connect to DB!")
    }
  }
  catch(err){
    throw new Error("Could not start server!")
  }
}

async function tryConnectDB() {
  try {
    await mongo.connectToDB();
  } catch (err) {
    return false;
  }
  return true;
}



createServer()
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}


process.on('SIGINT', () => {
  console.log(' SIGINT. Shutting down');
  mongo.closeDBConnection().then((value)=>{
    console.log(value)
    server.close(() => {
      console.log('Process terminated');
    });
  })
  

});